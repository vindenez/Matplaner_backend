name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 22 to compile the Spring Boot project
      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          java-version: '22'
          distribution: 'temurin'

      # Build the Spring Boot project with Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Set up SSH agent to deploy to DigitalOcean
      - name: Set up SSH agent for DigitalOcean
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      # Add the GitHub Actions SSH key for cloning the repository
      - name: Set up GitHub SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.ACTIONS_DEPLOY_SSH_KEY }}

      # Clone the repository on the droplet (or pull latest changes if already cloned)
      - name: Clone or Update Repository on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "
          if [ ! -d /root/Matplaner_backend ]; then
            git clone git@github.com:vindenez/Matplaner_backend.git /root/Matplaner_backend;
          else
            cd /root/Matplaner_backend && git pull origin main;
          fi"

      # Build the Docker image on the Droplet
      - name: Build Docker image on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "
          cd /root/Matplaner_backend && docker build -t matplaner-backend ."

      # Deploy the Docker image using Docker Compose on the droplet
      - name: Deploy the Docker image using Docker Compose
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }}:/root/docker-compose.yml
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "
          docker-compose -f /root/docker-compose.yml up -d"

      # Set environment variables and ensure they are available for the application
      - name: Set Environment Variables
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_SSH_HOST }} "
            export SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            export SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }} \
            export SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }} \
            export SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }} \
            export REDIS_HOST=${{ secrets.REDIS_HOST }} \
            export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            export REDIS_PORT=${{ secrets.REDIS_PORT }} \
            export REDIS_URL=${{ secrets.REDIS_URL }} \
            export DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
            export DATABASE_URL=${{ secrets.DATABASE_URL }} \
            export DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} \
            && docker-compose -f /root/docker-compose.yml up -d"