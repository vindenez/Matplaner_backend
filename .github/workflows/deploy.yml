name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 22 to compile the Spring Boot project
      - name: Set up JDK 22
        uses: actions/setup-java@v2
        with:
          java-version: '22'
          distribution: 'temurin'

      # Build the Spring Boot project with Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Set up SSH agent to deploy to DigitalOcean
      - name: Set up SSH agent for DigitalOcean
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      # Optional: Check if the SSH key was correctly added to the agent
      - name: List SSH Keys in Agent
        run: ssh-add -l

      # Clone the repository on the droplet (or pull latest changes if already cloned)
      - name: Clone or Update Repository on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@167.99.210.156 "
          if [ ! -d /root/Matplaner_backend ]; then
            git clone git@github.com:vindenez/Matplaner_backend.git /root/Matplaner_backend;
          else
            cd /root/Matplaner_backend && git pull origin main;
          fi"

      # Build the Docker image on the Droplet
      - name: Build Docker image on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@167.99.210.156 "
          cd /root/Matplaner_backend && docker build -t matplaner-backend ."

      # Create or Update .env file on the Droplet to store environment variables
      - name: Create or Update .env file on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no root@167.99.210.156 "
          echo 'SUPABASE_URL=${{ secrets.SUPABASE_URL }}' > /root/.env &&
          echo 'SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}' >> /root/.env &&
          echo 'SUPABASE_API_KEY=${{ secrets.SUPABASE_API_KEY }}' >> /root/.env &&
          echo 'SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}' >> /root/.env &&
          echo 'REDIS_HOST=${{ secrets.REDIS_HOST }}' >> /root/.env &&
          echo 'REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}' >> /root/.env &&
          echo 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> /root/.env &&
          echo 'REDIS_URL=${{ secrets.REDIS_URL }}' >> /root/.env &&
          echo 'DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}' >> /root/.env &&
          echo 'DATABASE_URL=${{ secrets.DATABASE_URL }}' >> /root/.env &&
          echo 'DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}' >> /root/.env"

      # Deploy the Docker image using Docker Compose on the droplet
      - name: Deploy the Docker image using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no root@167.99.210.156 "
          docker-compose -f /root/docker-compose.yml up -d"
